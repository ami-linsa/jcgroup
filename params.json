{"name":"Jcgroup","tagline":"Cgroup on JVM","body":"#jcgroup\r\n\r\n[![Build Status](https://travis-ci.org/haosdent/jcgroup.png?branch=master)](https://travis-ci.org/haosdent/jcgroup) [![Coverage Status](https://coveralls.io/repos/haosdent/jcgroup/badge.png?branch=master)](https://coveralls.io/r/haosdent/jcgroup?branch=master)\r\n\r\njcgroup is a cgroup wrapper on JVM. You could use this library to limit the CPU shares, Disk I/O speed, Network bandwidth and etc of a thread.\r\n\r\n## Subsystems\r\n\r\n☑ blkio<br/>\r\n☑ common<br/>\r\n☑ cpu<br/>\r\n☑ cpuacct<br/>\r\n☑ cpuset<br/>\r\n☑ devices<br/>\r\n☑ freezer<br/>\r\n☑ memory<br/>\r\n☑ net_cls<br/>\r\n☑ net_prio<br/>\r\n\r\n## Example\r\n\r\n>This code snippet create two threads and set different cpu shares of them. One is 512 while another is 2048.\r\n\r\n![jcgroup_example_cpu][1]\r\n\r\n```java\r\npublic class ExampleTest {\r\n\r\n  private static final Logger LOG = LoggerFactory.getLogger(ExampleTest.class);\r\n  private static Admin admin;\r\n  private static Group root;\r\n  private static Group one;\r\n  private static Group two;\r\n\r\n  @BeforeClass\r\n  public static void setUpClass() {\r\n    try {\r\n      admin = new Admin(Constants.SUBSYS_CPUSET | Constants.SUBSYS_CPU);\r\n      root = admin.getRootGroup();\r\n      one = admin.createGroup(\"one\", Constants.SUBSYS_CPUSET | Constants.SUBSYS_CPU);\r\n      two = admin.createGroup(\"two\", Constants.SUBSYS_CPUSET | Constants.SUBSYS_CPU);\r\n    } catch (IOException e) {\r\n      LOG.error(\"Create cgroup Failed.\", e);\r\n      assertTrue(false);\r\n    }\r\n  }\r\n\r\n  @AfterClass\r\n  public static void tearDownClass() {\r\n    try {\r\n      admin.umount();\r\n    } catch (IOException e) {\r\n      LOG.error(\"Umount cgroup failed.\", e);\r\n      assertTrue(false);\r\n    }\r\n  }\r\n\r\n  @Test\r\n  public void testCpu() {\r\n    try {\r\n      one.getCpuset().setCpus(new int[]{0});\r\n      two.getCpuset().setCpus(new int[]{0});\r\n      one.getCpuset().setMems(new int[]{0});\r\n      two.getCpuset().setMems(new int[]{0});\r\n      one.getCpu().setShares(512);\r\n      two.getCpu().setShares(2048);\r\n      final Group oneTmp = one;\r\n      final Group twoTmp = two;\r\n      new Thread(){\r\n        @Override\r\n        public void run() {\r\n          int id = Threads.getThreadId();\r\n          LOG.info(\"Thread id:\" + id);\r\n          try {\r\n            oneTmp.getCpu().addTask(id);\r\n            while (true);\r\n          } catch (IOException e) {\r\n            LOG.error(\"Test cpu failed.\", e);\r\n            assertTrue(false);\r\n          }\r\n        }\r\n      }.start();\r\n      new Thread(){\r\n        @Override\r\n        public void run() {\r\n          int id = Threads.getThreadId();\r\n          LOG.info(\"Thread id:\" + id);\r\n          try {\r\n            twoTmp.getCpu().addTask(id);\r\n            while (true);\r\n          } catch (IOException e) {\r\n            LOG.error(\"Test cpu failed.\", e);\r\n            assertTrue(false);\r\n          }\r\n        }\r\n      }.start();\r\n      Thread.sleep(60000l);\r\n    } catch (Exception e) {\r\n      LOG.error(\"Test cpu failed.\", e);\r\n      assertTrue(false);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n## Requirements\r\n\r\n* Linux version (>= 2.6.18)\r\n\r\n\r\n  [1]: https://raw.github.com/haosdent/jcgroup/master/img/jcgroup_example_cpu.jpg","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}